package bits.sem4.dissertation.web;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import bits.sem4.dissertation.MachineLearningConnector.LinearRegressionConnector;
import bits.sem4.dissertation.data.entity.PatientsForStrokeCheck;
import bits.sem4.dissertation.repository.PatientForStrokeCheckRepository;

@RestController // This means that this class is a Controller
@RequestMapping("/demo") // This means URL's start with /demo (after Application path)
public class PatientForStrokeCheckWebController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private PatientForStrokeCheckRepository patientForStrokeCheckRepository;

	// @GetMapping(path="/all")
	@GetMapping("all")
	public Iterable<PatientsForStrokeCheck> getRooms() {
		return this.patientForStrokeCheckRepository.findAll();
	}
	
	@GetMapping("/patient/{id}")
	Optional<PatientsForStrokeCheck> findPatient(@PathVariable Long id) {
	   return this.patientForStrokeCheckRepository.findById(id);
	}
	
	@GetMapping("/predictPatient/{id}")
	Optional<PatientsForStrokeCheck> predictPatient(@PathVariable Long id) {
	   Optional<PatientsForStrokeCheck> patientData = this.patientForStrokeCheckRepository.findById(id);
	   if (patientData != null) {
		   return patientData;
	   } else {
		   System.out.println("DOES NOT EXIST");
		   return patientData;
	   }
	}
//	TypeError: Failed to execute 'json' on 'Response': body stream already read
//	http://localhost:8080/demo/predictPatientForStroke/9046/Alwin/35/Urban/228.69/36.6/Male/Yes/Yes/Yes/Smokes/neverWorked
//	http://localhost:8080/demo/predictPatient/9046/gfre/34/Urban/343/23/Male/Yes/No/No/unknown/selfEmployed
	@GetMapping("/predictPatientForStroke/{id}/{name}/{age}/{residence}/{avgGlucLvl}/{bmi}/{gender}/{everMarried}/{heartDisease}/{hyperTension}/{smokingStatus}/{workType}")
	Optional<PatientsForStrokeCheck> predictStrokeForPatient(@PathVariable Long id, @PathVariable String name, @PathVariable int age,
			@PathVariable String residence, @PathVariable double avgGlucLvl, @PathVariable double bmi, 
			@PathVariable String gender, @PathVariable String everMarried,
			@PathVariable String heartDisease, @PathVariable String hyperTension, @PathVariable String smokingStatus,@PathVariable String workType) {
	   Optional<PatientsForStrokeCheck> patientData = this.patientForStrokeCheckRepository.findById(id);
	   if (!patientData.isEmpty()) {
		   return patientData;
	   } else {
		   System.out.println("DOES NOT EXIST");
		   PatientsForStrokeCheck patientForStrokeCheck = new PatientsForStrokeCheck();
		   patientForStrokeCheck.setPatientId(id);
		   patientForStrokeCheck.setPatientName(name);
		   patientForStrokeCheck.setGender(gender);
		   patientForStrokeCheck.setAge(age);
		   patientForStrokeCheck.setHyperTension(hyperTension.equalsIgnoreCase("Yes") ? 1 : 0);
		   patientForStrokeCheck.setHeartDisease(heartDisease.equalsIgnoreCase("Yes") ? 1 : 0);
		   patientForStrokeCheck.setEverMarried(everMarried);
		   patientForStrokeCheck.setWorktype(workType);
		   patientForStrokeCheck.setResidence(residence);
		   patientForStrokeCheck.setAverageGlucoseLevel(avgGlucLvl);
		   patientForStrokeCheck.setBMI(bmi);
		   patientForStrokeCheck.setSmokingStatus(smokingStatus);
		   
		   String prediction = LinearRegressionConnector.sendPatientDataAndRecievePrediction(patientForStrokeCheck);
		   double stroke = Double.parseDouble(prediction);
		   patientForStrokeCheck.setStroke(stroke);
		   
		   patientForStrokeCheckRepository.save(patientForStrokeCheck);
		   
		   return Optional.ofNullable(patientForStrokeCheck);
	   }
	}
//	java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n -jar strokePredictor-0.0.1-SNAPSHOT.jar
}
